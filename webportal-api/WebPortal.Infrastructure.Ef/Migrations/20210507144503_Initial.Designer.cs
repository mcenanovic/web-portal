// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebPortal.Infrastructure.Ef;

namespace WebPortal.Infrastructure.Ef.Migrations
{
    [DbContext(typeof(WebPortalDbContext))]
    [Migration("20210507144503_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("CategoryLookupID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("SharedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("CategoryLookupID");

                    b.HasIndex("UserID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.CategoryLookup", b =>
                {
                    b.Property<short>("CategoryLookupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CategoryLookupID");

                    b.ToTable("CategoryLookups");

                    b.HasData(
                        new
                        {
                            CategoryLookupID = (short)1,
                            Name = "Trending"
                        },
                        new
                        {
                            CategoryLookupID = (short)2,
                            Name = "Politics"
                        },
                        new
                        {
                            CategoryLookupID = (short)3,
                            Name = "Business"
                        },
                        new
                        {
                            CategoryLookupID = (short)4,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryLookupID = (short)5,
                            Name = "Regional"
                        });
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Comment", b =>
                {
                    b.Property<long>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("DownVote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long?>("ReplyCommentCommentID")
                        .HasColumnType("bigint");

                    b.Property<int>("UpVote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("ReplyCommentCommentID")
                        .IsUnique()
                        .HasFilter("[ReplyCommentCommentID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Role", b =>
                {
                    b.Property<short>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = (short)1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleID = (short)2,
                            Name = "Writer"
                        },
                        new
                        {
                            RoleID = (short)3,
                            Name = "Visitor"
                        });
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("RoleID")
                        .HasColumnType("smallint");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "pw"
                        });
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Article", b =>
                {
                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.CategoryLookup", "CategoryLookup")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryLookupID");

                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserID");

                    b.Navigation("CategoryLookup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Comment", b =>
                {
                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.Comment", "ReplyComment")
                        .WithOne()
                        .HasForeignKey("WebPortal.Infrastructure.Ef.Entities.Comment", "ReplyCommentCommentID");

                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ReplyComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.User", b =>
                {
                    b.HasOne("WebPortal.Infrastructure.Ef.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.CategoryLookup", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebPortal.Infrastructure.Ef.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
